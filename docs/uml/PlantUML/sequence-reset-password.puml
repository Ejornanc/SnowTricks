@startuml
actor "Visitor" as User
participant "ResetPasswordController" as RPC
participant "ResetPasswordRequestFormType" as RPRF
participant "ChangePasswordFormType" as CPFT
participant "UserRepository" as UR
participant "User" as UserEntity
participant "UserPasswordHasher" as UPH
participant "Mailer" as Mailer
participant "EntityManager" as EM
database "Database" as DB

' Request password reset
User -> RPC: GET /reset-password
RPC -> RPRF: createForm(ResetPasswordRequestFormType::class)
RPRF --> RPC: request form
RPC -> User: display request form

User -> RPC: POST /reset-password (email)
RPC -> RPRF: handleRequest(request)
RPRF --> RPC: form with data

alt form is valid
    RPC -> RPRF: get('email')->getData()
    RPRF --> RPC: email
    
    RPC -> UR: findOneBy(['email' => email])
    UR -> DB: SELECT * FROM users WHERE email=?
    DB --> UR: user data
    UR --> RPC: user object
    
    alt user found
        RPC -> RPC: generate token
        RPC -> UserEntity: setVerificationToken(token)
        
        RPC -> EM: flush()
        EM -> DB: UPDATE users SET verification_token=?
        DB --> EM: user updated
        EM --> RPC: success
        
        RPC -> Mailer: send(email with reset link)
        Mailer --> User: send reset email
    end
    
    RPC -> RPC: addFlash('success', 'Si cet email est associé à un compte, un lien de réinitialisation a été envoyé.')
    RPC -> User: redirect to login page
else form is invalid
    RPC -> User: display form with errors
end

' Reset password
User -> User: click on reset link in email
User -> RPC: GET /reset-password/{token}
RPC -> UR: findOneBy(['verificationToken' => token])
UR -> DB: SELECT * FROM users WHERE verification_token=?
DB --> UR: user data
UR --> RPC: user object

alt user not found
    RPC -> RPC: addFlash('danger', 'Token invalide ou expiré.')
    RPC -> User: redirect to request page
else user found
    RPC -> CPFT: createForm(ChangePasswordFormType::class)
    CPFT --> RPC: change password form
    RPC -> User: display change password form
    
    User -> RPC: POST /reset-password/{token} (new password)
    RPC -> CPFT: handleRequest(request)
    CPFT --> RPC: form with data
    
    alt form is valid
        RPC -> CPFT: get('plainPassword')->getData()
        CPFT --> RPC: plain password
        
        RPC -> UPH: hashPassword(user, plainPassword)
        UPH --> RPC: hashed password
        
        RPC -> UserEntity: setPassword(hashedPassword)
        RPC -> UserEntity: setVerificationToken(null)
        
        RPC -> EM: flush()
        EM -> DB: UPDATE users SET password=?, verification_token=NULL
        DB --> EM: user updated
        EM --> RPC: success
        
        RPC -> RPC: addFlash('success', 'Votre mot de passe a été réinitialisé. Vous pouvez maintenant vous connecter.')
        RPC -> User: redirect to login page
    else form is invalid
        RPC -> User: display form with errors
    end
end
@enduml